一、为什么进行自动化测试
- 缩短测试周期
- 避免人为出错
- 测试信息存储
- 提升测试覆盖率
- 其他


二、哪些项目不适合做自动化测试
- 项目周期短
- 项目需求变动大
- 自动化测试脚本复杂度高
- 可重复利用率低


三、哪些项目适合做自动化测试
- 频繁的回归测试
- 冒烟测试
- 传统行业需求变化不大，应用频繁


四、做自动化的正确姿态
- 先手工冒烟，完成业务主流程的测试
- 手工测试已经完成，后期再不影响进度的前提下逐渐实现自动化
- 需求分析
- 测试计划
- 测试用例
- 执行用例
- 测试报告
- 分析、定位、修复bug





一、分层设计理念
1、什么是分层设计？

2、为什么要分层设计？


二、数据驱动思想
1、什么是数据驱动？

2、数据驱动有什么意义？


三、接口自动化测试框架的技术点？
1、excel用例数据读取

2、配置信息的处理

3、日志记录处理

4、ddt数据驱动

5、请求处理

6、参数化&正则表达式

7、数据校验pymysql

8、接口依赖处理（动态创建属性的机制，getattr、setattr）

9、unittest单元测试框架

10、Jenkins持续集成
CI/CD

11、自动创建报告，并发送邮件


四、Python基础
1、python安装&变量&标识符

2、python中的数据类型：数值类型和非数值类型
数值类型：int、float、boolean
非数值类型：str、list、dict、tuple

3、流程控制语句
分支结构：if elif else
循环结构：for、while

4、函数
定义：def 函数名(形参1, 形参2, ...):
函数调用: 函数名(实参1，实参2, ...)
函数返回值: 返回一个数据、返回多个数据（元组）
函数参数：
    调用：位置参数、关键字参数
    定义：位置参数、默认参数、可变参数（*args, **kwargs）
函数作用域：全局作用域、局部作用域，global

5、文件操作
打开、读写、关闭
with open() as file1, open() as file2:
    pass

6、异常处理
结构：
try:
    pass
except 异常类1：
    pass
except (异常类2, 异常类3)：
    pass
except Exception as e:
    pass
else:
    pass
finally:
    pass


7、面向对象
定义：类、对象、属性、方法
属性分类：实例属性、类属性
方法分类：实例方法（构造方法）、类方法、静态方法
继承：拓展、重写


8、接口基础
定义：
分类：请求与响应








